x-common-env: &common_env
  ALLOW_PLAINTEXT_LISTENER: "yes"

services:
  zookeeper:
    image: bitnami/zookeeper:3.9
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports: ["2181:2181"]

  kafka:
    image: bitnami/kafka:3.5
    depends_on: [zookeeper]
    environment:
      <<: *common_env
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092
    ports: ["9092:9092"]

  ksqldb-server:
    image: confluentinc/ksqldb-server:0.29.0
    platform: linux/amd64
    depends_on: [ kafka ]
    environment:
      KSQL_BOOTSTRAP_SERVERS: kafka:9092
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_KSQL_SERVICE_ID: _ksqldb_app_
      KSQL_KSQL_SCHEMA_REGISTRY_URL: ""
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_CACHE_MAX_BYTES_BUFFERING: "0"
      KSQL_KSQL_OUTPUT_TOPIC_NAME_PREFIX: "ksql_"
      KSQL_LOG4J_ROOT_LOGLEVEL: "DEBUG"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8088/info" ]
      interval: 5s
      timeout: 2s
      retries: 15
    ports: [ "8088:8088" ]

  ksql-init:
    image: confluentinc/ksqldb-cli:0.29.0
    platform: linux/amd64
    depends_on:
      ksqldb-server:
        condition: service_healthy
    volumes:
      - ../ksql/init.sql:/init.sql:ro
      - ../ksql/wait.sh:/wait.sh:ro
    entrypoint: [ "/wait.sh" ]
    environment:
      - KSQL_SERVER=http://ksqldb-server:8088
    restart: "no"

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.29.0
    platform: linux/amd64
    depends_on: [ksqldb-server]
    entrypoint: /bin/sh
    tty: true

  minio:
    image: minio/minio:RELEASE.2024-01-29T03-56-32Z
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    volumes:
      - minio-data:/data
    ports: ["9000:9000", "9001:9001"]

  prometheus:
    image: prom/prometheus:v2.52.0
    volumes:
      - ../config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports: ["9090:9090"]

  grafana:
    image: grafana/grafana:10.4.2
    depends_on: [prometheus]
    ports: ["3000:3000"]

  flight-producer:
    build:
      context: ../producers
    depends_on: [kafka, ksql-init]
    environment:
      - KAFKA_BROKER=kafka:9092
      - EVENT_FILE=/app/data/sample_flights.json
    volumes:
      - ../data:/app/data:ro
    profiles: ["dev"]

volumes:
  minio-data:
